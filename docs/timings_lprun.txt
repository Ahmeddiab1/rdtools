Timer unit: 1e-06 s

Total time: 6.29357 s
File: /Users/anag/anaconda/envs/python2.7/lib/python2.7/site-packages/rdtools/clearsky_temperature.py
Function: get_clearsky_tamb at line 14

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    14                                           def get_clearsky_tamb(times, latitude, longitude, window_size=60, gauss_std=20):
    15                                               '''
    16                                               :param times:       DateTimeIndex in local time
    17                                               :param latitude:    float degrees
    18                                               :param longitude:   float degrees
    19                                               :return:            pandas Series of cell sky ambient temperature
    20                                               '''
    21                                           
    22                                           
    23         1           95     95.0      0.0      filepath = pkg_resources.resource_filename('rdtools', 'data/temperature.hdf5')
    24                                           
    25         1            6      6.0      0.0      buffer = timedelta(days=80)
    26         1          121    121.0      0.0      interval = times[1] - times[0]
    27         1        15954  15954.0      0.3      freq_actual = pd.infer_freq(times)	
    28         1          899    899.0      0.0      dt_daily = pd.date_range(times[0] - buffer, times[-1] + buffer, freq='D')
    29                                           
    30                                               #print model
    31                                           
    32                                           
    33         1          273    273.0      0.0      f = h5py.File(filepath, "r")
    34                                           
    35         1          205    205.0      0.0      a = f['temperature']['day']
    36         1          107    107.0      0.0      b = f['temperature']['night']
    37                                           
    38         1          850    850.0      0.0      lons = len(a[:, 0, 0])
    39         1          206    206.0      0.0      lats = len(a[0, :, 0])
    40                                           
    41         1            2      2.0      0.0      lon_temp = longitude - 180
    42         1            1      1.0      0.0      if lon_temp  < 0:
    43         1            2      2.0      0.0          lon_temp += 360
    44         1            4      4.0      0.0      lon_index = round(float(lons) * float(lon_temp) / 360.0)
    45         1            2      2.0      0.0      lat_index = round(float(lats) * (90.0 - float(latitude)) / 180.0)
    46                                           
    47                                               #print lons, lats, lon_index, lat_index
    48                                           
    49                                           
    50         1          459    459.0      0.0      df = pd.DataFrame(index=dt_daily)
    51         1         1610   1610.0      0.0      df['month'] = df.index.month
    52                                           
    53         1            2      2.0      0.0      ave_day = []
    54         1            1      1.0      0.0      ave_night = []
    55                                           
    56         1            1      1.0      0.0      radius = 0
    57        13           19      1.5      0.0      for k in range(12):
    58                                           
    59        12        15324   1277.0      0.2          day = _get_pixel_value(a,lon_index,lat_index,k,radius)
    60        12        15477   1289.8      0.2          night = _get_pixel_value(b, lon_index, lat_index, k, radius)
    61                                           
    62        12           30      2.5      0.0          if day == float("NaN"):
    63                                                       day = a[:,lat_index,k]
    64        12           16      1.3      0.0          if night == float("NaN"):
    65                                                       night = a[:,lat_index,k]
    66                                           
    67        12           19      1.6      0.0          ave_day.append(day)
    68        12           15      1.2      0.0          ave_night.append(night)
    69                                           
    70                                           
    71                                               #print ave_day, ave_night
    72                                           
    73        13           27      2.1      0.0      for i in range(12):
    74        12        68827   5735.6      1.1          df.loc[df['month']== i+1, 'day'] = ave_day[i]
    75        12        68937   5744.8      1.1          df.loc[df['month'] == i+1, 'night'] = ave_night[i]
    76                                           
    77         1           94     94.0      0.0      print('Before resampling:')
    78         1         4817   4817.0      0.1      print(df.head())
    79                                           
    80         1         4272   4272.0      0.1      df = df.rolling(window=window_size, win_type='gaussian',min_periods=1,center=True).mean(std=gauss_std)
    81         1           78     78.0      0.0      print('After rolling mean:')
    82         1         4839   4839.0      0.1      print(df.head())
    83                                           
    84         1       125160 125160.0      2.0      df = df.resample(freq_actual).interpolate(method='linear')
    85         1        59321  59321.0      0.9      df['month'] = df.index.month
    86         1           48     48.0      0.0      print('After resampling:')
    87         1         5217   5217.0      0.1      print(df.head())
    88                                           
    89         1        40139  40139.0      0.6      df = df.reindex(times, method='nearest')
    90                                           
    91                                               #df = df[(df.index >= times[0]) & (df.index <= times[-1])]
    92                                           
    93         1           75     75.0      0.0      print('After reindexing:')
    94         1         4560   4560.0      0.1      print(df.head())
    95                                           
    96                                               #func_utc_offsets = lambda y: y.utcoffset().total_seconds()/3600.0
    97                                               #vfunc = np.vectorize(func_utc_offsets)
    98                                               #utc_offsets = vfunc(np.array(list(df.index)))
    99                                               #df['solar_noon_offset'] = solar_noon_offset(utc_offsets)
   100                                           
   101    920075      5687269      6.2     90.4      utc_offsets = [y.utcoffset().total_seconds()/3600.0 for y in df.index]
   102         1            3      3.0      0.0      solar_noon_offset = lambda utc_offset : longitude / 180.0 * 12.0 - utc_offset
   103         1        33949  33949.0      0.5      df['solar_noon_offset'] = solar_noon_offset(np.array(utc_offsets))
   104                                           
   105         1       102528 102528.0      1.6      df['hour_of_day'] = df.index.hour + df.index.minute / 60.0
   106         1          208    208.0      0.0      df['Clear Sky Temperature (C)'] = _get_temperature(df['hour_of_day'].values, df['night'].values,\
   107         1        31362  31362.0      0.5                                                         df['day'].values,df['solar_noon_offset'].values)
   108         1          135    135.0      0.0      return df['Clear Sky Temperature (C)']