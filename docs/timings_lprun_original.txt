Timer unit: 1e-06 s

Total time: 92.234 s
File: /Users/anag/anaconda/envs/python2.7/lib/python2.7/site-packages/rdtools/clearsky_temperature.py
Function: get_clearsky_tamb at line 9

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           def get_clearsky_tamb(times, latitude, longitude, window_size=40, gauss_std=20):
    10                                               '''
    11                                               :param times:       DateTimeIndex in local time
    12                                               :param latitude:    float degrees
    13                                               :param longitude:   float degrees
    14                                               :return:            pandas Series of cell sky ambient temperature
    15                                               '''
    16                                           
    17         1          105    105.0      0.0      filepath = pkg_resources.resource_filename('rdtools', 'data/temperature.hdf5')
    18                                           
    19         1            7      7.0      0.0      buffer = timedelta(days=window_size)
    20         1        15888  15888.0      0.0      freq_actual = pd.infer_freq(times)
    21         1         1012   1012.0      0.0      dt_daily = pd.date_range(times[0] - buffer, times[-1] + buffer, freq='D')
    22                                           
    23         1          349    349.0      0.0      f = h5py.File(filepath, "r")
    24                                           
    25         1          295    295.0      0.0      a = f['temperature']['day']
    26         1          118    118.0      0.0      b = f['temperature']['night']
    27                                           
    28         1        13390  13390.0      0.0      lons = len(a[:, 0, 0])
    29         1          267    267.0      0.0      lats = len(a[0, :, 0])
    30                                           
    31         1            2      2.0      0.0      lon_temp = longitude - 180
    32         1            1      1.0      0.0      if lon_temp < 0:
    33         1            2      2.0      0.0          lon_temp += 360
    34         1            4      4.0      0.0      lon_index = round(float(lons) * float(lon_temp) / 360.0)
    35         1            2      2.0      0.0      lat_index = round(float(lats) * (90.0 - float(latitude)) / 180.0)
    36                                           
    37         1          587    587.0      0.0      df = pd.DataFrame(index=dt_daily)
    38         1         1761   1761.0      0.0      df['month'] = df.index.month
    39                                           
    40         1            2      2.0      0.0      ave_day = []
    41         1            1      1.0      0.0      ave_night = []
    42                                           
    43         1            1      1.0      0.0      radius = 0
    44        13           22      1.7      0.0      for k in range(12):
    45                                           
    46        12        15890   1324.2      0.0          day = _get_pixel_value(a, lon_index, lat_index, k, radius)
    47        12        28537   2378.1      0.0          night = _get_pixel_value(b, lon_index, lat_index, k, radius)
    48                                           
    49        12           34      2.8      0.0          if day == float("NaN"):
    50                                                       day = a[:, lat_index, k]
    51        12           16      1.3      0.0          if night == float("NaN"):
    52                                                       night = a[:, lat_index, k]
    53                                           
    54        12           22      1.8      0.0          ave_day.append(day)
    55        12           18      1.5      0.0          ave_night.append(night)
    56                                           
    57        13           28      2.2      0.0      for i in range(12):
    58        12        75402   6283.5      0.1          df.loc[df['month'] == i + 1, 'day'] = ave_day[i]
    59        12        71708   5975.7      0.1          df.loc[df['month'] == i + 1, 'night'] = ave_night[i]
    60                                           
    61         1         4550   4550.0      0.0      df = df.rolling(window=window_size, win_type='gaussian', min_periods=1, center=True).mean(std=gauss_std)
    62                                           
    63         1       133481 133481.0      0.1      df = df.resample(freq_actual).interpolate(method='linear')
    64         1        61121  61121.0      0.1      df['month'] = df.index.month
    65                                           
    66         1        44374  44374.0      0.0      df = df.reindex(times, method='nearest')
    67                                           
    68    934150      6050938      6.5      6.6      utc_offsets = [y.utcoffset().total_seconds() / 3600.0 for y in df.index]
    69                                           
    70         1            2      2.0      0.0      def solar_noon_offset(utc_offset):
    71                                                   return longitude / 180.0 * 12.0 - utc_offset
    72    934150      1663326      1.8      1.8      df['solar_noon_offset'] = [solar_noon_offset(utc_offset) for utc_offset in utc_offsets]
    73                                           
    74         1        99643  99643.0      0.1      df['hour_of_day'] = df.index.hour + df.index.minute / 60.0
    75         1            3      3.0      0.0      df['Clear Sky Temperature (C)'] = df.apply(lambda x:
    76                                                                                          _get_temperature(x['hour_of_day'], x['night'],
    77         1     83950915 83950915.0     91.0                                                                  x['day'], x['solar_noon_offset']), axis=1)
    78         1          134    134.0      0.0      return df['Clear Sky Temperature (C)']